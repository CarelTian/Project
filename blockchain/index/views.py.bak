import os
import shutil
from django.http import JsonResponse
from Crypto.Hash import MD5
from django.forms.models import model_to_dict
from django.contrib.auth.models import User
from django.contrib import auth
from index.models import *
import socket
from json import *
import time
head='local|'
def send(msg):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect(('127.0.0.1', 8334))
    msg=head+msg
    sock.send(msg.encode())
    sock.close()

def create_token():
    data=str(time.time())
    digest = MD5.new(data.encode('utf-8')).hexdigest()
    return digest

def register(request):
    if request.method=='POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        try:
            user=User.objects.create_user(username=username, password=password)
            UserInfo.objects.create(user_id=user.id)
            tem='./users/temopoary'+username
            ack='./users/ack'+username
            if not os.path.exists(tem):
                os.mkdir(tem)
            if not os.path.exists(ack):
                os.mkdir(ack)
            return JsonResponse({'success': 1})
        except Exception as e:
            print(e)
            return JsonResponse({'success': 0,'msg':'用户名已存在'})

def login(request):
    if request.method=='POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = auth.authenticate(username=username, password=password)
        if user:
            userinfo=UserInfo.objects.get(user_id=user.id)
            if userinfo.token==None:
                userinfo.token=create_token()
                userinfo.save()
            token=userinfo.token
            return JsonResponse({'success': 1,'token':token,'user':user.username})
        else:
            return JsonResponse({'msg': '账号密码错误'})

def addnode(request):
    op='addnode|'
    if request.method=='POST':
        file=request.FILES.get('file')
        with open('./Keys/'+file.name, 'wb+') as f:
            for chunk in file.chunks():
                f.write(chunk)
        nodename=request.POST.get('nodename')
        ip=request.POST.get('ip')
        try:
            if nodename!= None and ip!=None:
                js={'nodename':nodename,'ip':ip}
                js=dumps(js)
                msg=op+js
                send(msg)
            return JsonResponse({'success':1})
        except WindowsError:
            return JsonResponse({'success':0,'msg':'区块链网络异常'})

def audit(request):
    if request.method =='GET':
        raw=tempAsset.objects.all()
        data=[]
        for i in raw:
            a=model_to_dict(i)
            name=User.objects.get(id=i.user_id).username
            a['name']=name
            data.append(a)
        return JsonResponse({'success':1,'data':data})

    if request.method == 'POST':
        #token=request.META.get('HTTP_TOKEN')
        #info= UserInfo.objects.get(token=token)
        username=request.POST.get('username')
        user_id=User.objects.get(username=username).id
        filename=request.POST.get('filename')
        op=request.POST.get('op')
        temp=tempAsset.objects.get(user_id=user_id,filename=filename)
        old="./users/temopoary/"+username+'/'+filename
        ack="./users/ack/"+username+'/'+filename
        try:
            if op=='delete':
                os.remove(old)
            elif op=='accept':
                shutil.move(old, ack)
                Accept.objects.create(user_id=temp.user_id,address=temp.address,
                                      type=temp.type,asset=temp.asset,filename=temp.filename)

            temp.delete()
        except Exception as e:
            print(e)
            return JsonResponse({'success': 0, 'msg': '服务器出错'})
        return JsonResponse({'success': 1, 'msg': 'yes'})


